collectd REST Endpoint
======================

Now RestMQ has a collectd rest endpoint to receive and queue messages from collectd and collectd_web
There is an example at examples/test_collectd.py.
Run with: collectd_restmq_server

This is an specialization of RestMQ, that shows how flexible and easy the internals are. The main daemon is not restmq/web.py but restmq/collectd.py, which is using core and dispatch from RestMQ to implement only the necessary frontend using cyclone.

The collectd entrypoint does a vaery simple and basic validation of the data send by the collectd daemon.

* collectd Configuration:

** Data collection:

	RestMQ collectd entrypoint will decide which format to parse based on the 'Content-type' sent by the client.

	* Plain Text

	Use the write_http(http://collectd.org/documentation/manpages/collectd.conf.5.shtml#plugin_write_http) bundled with collectd to pass
	data to the RestMQ server using the Plain Text Protocol (http://collectd.org/wiki/index.php/Plain_text_protocol), RestMQ will
	generated a JSON with the data to be inserted on the RestMQ Queue:

	collectd.conf:
	...
	<Plugin write_http>
	        <URL "http://<collectd_restmq_server>/collectd/data">
	               Format Command
	#               User "collectd"
	#               Password "weCh3ik0"
	        </URL>
	</Plugin>

	Example JSON inserted in the RestMQ:

	[{"host": "collectd_restmq_server", "type_instance": "df-boot", "plugin_instance": "df", "value": "1288548767:116497408.000000:391246848.000000", "interval": "10"}]

	* JSON Generated by collectd

	Use the write_http(http://collectd.org/documentation/manpages/collectd.conf.5.shtml#plugin_write_http) bundled with collectd to pass
	data to the RestMQ server using the the JSON generated by collectd, the collectd endpoint just insert the data in the RestMQ Queue:

	collectd.conf:
	...
	<Plugin write_http>
	        <URL "http://<collectd_restmq_server>/collectd/data">
	               Format JSON
	#               User "collectd"
	#               Password "yerpass"
	        </URL>
	</Plugin>

	Example JSON inserted in the RestMQ:

	[{"values":[1.16497e+08,3.91247e+08],"time":1288625884,"interval":10,"host":"collectd_restmq_server","plugin":"df","plugin_instance":"","type":"df","type_instance":"boot"}]

** Event collection:

	Since the write_http is not yet used for events, you need to create a simple script using CURL to send events to the RestMQ server
	using the Plain Text Protocol (http://collectd.org/wiki/index.php/Plain_text_protocol):

	collectd.conf:
	...
	<Plugin exec>
	#       Exec "user:group" "/path/to/exec"
	        NotificationExec "rgaiser:rgaiser" "/home/rgaiser/event.sh"
	</Plugin>


	event.sh:
	#!/bin/bash

	EVENT=`cat`
	/usr/bin/curl -X POST -d "$EVENT" http://<collectd_restmq_server>/collectd/event

	Example JSON inserted in the RestMQ:

	[{"severity": "WARNING"}, {"time": "1288548727"}, {"host": "collectd_restmq_server"}, {"plugin": "df"}, {"type": "df"}, {"typeinstance": "boot"}, {"datasource": "used"}, {"currentvalue": "1.164974e+08"}, {"warningmin": "nan"}, {"warningmax": "1.000000e+01"}, {"failuremin": "nan"}, {"failuremax": "nan"}, {"event_text": "Host collectd_restmq_server, plugin df type df (instance boot): Data source \\"used\\" is currently 116497408.000000. That is above the warning threshold of 10.000000%."}]

* RestMQ Example

Use the examples/test_collectd.py to get the data from the RestMQ using the Comet consumer.

Author: Roberto Gaiser (http://github.com/rgaiser)
